local data = require "main.data"

-- dashing
go.property("dashing", false)
go.property("dash_cooldown", 3)
go.property("total_dashes", 1)
go.property("dash_distance", 250)

-- movement
go.property("speed", 250)
go.property("input", vmath.vector3())

-- items
go.property("coins", 0)

-- camera
go.property("cam_follow", true)


local TILESIZE = 64

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("/guis", "show_dashes", { dashes = self.total_dashes } )
	msg.post("/guis", "update_coins", { coins = self.coins } )
	msg.post("/camera", "acquire_camera_focus")
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function get_player_tile(pos)
	return vmath.vector3(math.floor((pos.x + TILESIZE) / TILESIZE), math.floor((pos.y + TILESIZE) / TILESIZE), pos.z)
end

function update(self, dt)
	local pos = go.get_position()
	local ptile = get_player_tile(pos)
	-- go.set_position(go.get_position(), "/camera")
	local tile = tilemap.get_tile("/background#background", "ground", ptile.x, ptile.y)
	
	if tile == 1 then
		local ground = 1
		timer.delay(0.5, true, function(self, ground_gone, time_elapsed)
			tilemap.set_tile("/background#background", "ground", ptile.x, ptile.y, ground + 1)
			ground = ground + 1
			if ground == 5 then
				timer.cancel(ground_gone)
			end
		end)
	elseif tile == 4 or tile == 5 then
		msg.post(".", "release_input_focus")
		go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, .01, go.EASING_LINEAR, .5)
		go.animate(".", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_LINEAR, .5)
	end
	
	if vmath.length(self.input) > 1 then
		self.input = vmath.normalize(self.input)
	end

	if self.dashing then
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, pos + self.input * self.dash_distance, go.EASING_LINEAR, .2, 0, function()
			timer.delay(self.dash_cooldown, false, function()
				self.total_dashes = self.total_dashes + 1
				msg.post("/guis", "show_dashes", { dashes = self.total_dashes } )
			end)
		end)
		self.dashing = false
	end

	pos = pos + self.input * self.speed * dt
	go.set_position(pos)
	-- print(self.input)
	self.input = vmath.vector3()
end

function fixed_update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("give_coin") then
		self.coins = self.coins + 1
		msg.post("/guis", "update_coins", { coins = self.coins } )
	elseif message_id == hash("trigger_response") then
		pprint(message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("right") then
		self.input.x = 1
	elseif action_id == hash("left") then
		self.input.x = -1
	end

	if action_id == hash("up") then
		self.input.y = 1
	elseif action_id == hash("down") then
		self.input.y = -1
	end

	if action_id == hash("spacebar") and action.pressed then
		if self.total_dashes > 0 then
			self.total_dashes = self.total_dashes - 1
			self.dashing = true
			sound.play("/sounds#dash")
			msg.post("/guis", "show_dashes", { dashes = self.total_dashes } )
		else
			print("out of dashes")
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
